14:
  description: "Print out the number 42"
  cases:
  - expected_stdout: "42"
15:
  description: "Print out 1, 2, and 3 on separate lines"
  cases:
  - expected_stdout: "1\n2\n3"
16:
  description: "Example of assignment"
  starting_code: "a = 5\nputs a"
17:
  description: "Another example of assignment"
  starting_code: "m = 2\nb = -5\nx = 3\ny = m * x + b\nputs y"
18:
  description: "Multiply 17 by 31 and print the answer"
  starting_code: "puts 17 * 31"
19:
  description: "Example of variable name with underscores"
  starting_code: "price_of_cabbage_in_usd_per_lb = 0.55\nputs price_of_cabbage_in_usd_per_lb"
20:
  description: "Example of a variable (`x`) being provided in a test case"
  starting_code: "puts x"
  cases:
  - given: { x: 4 }
  - given: { x: 5 }
21:
  description: "Example of two test cases that expect different output based on the variable `x`"
  starting_code: "puts x"
  cases:
  - given: { x: 4 }
    expected_stdout: "4"
  - given: { x: 5 }
    expected_stdout: "5"
22:
  description: "Print out double of whatever number `x` is."
  cases:
  - given: { x: 4 }
    expected_stdout: "8"
  - given: { x: 5 }
    expected_stdout: "10"
  - given: { x: 6 }
    expected_stdout: "12"
23:
  description: "Print out the square of `a` plus the square of `b`."
  cases:
  - given: { a: 3, b: 4 }
    expected_stdout: "25"
  - given: { a: 0, b: 1 }
    expected_stdout: "1"
  - given: { a: 2, b: 3 }
    expected_stdout: "13"
24:
  description: "Print out the value of `b` twice, and ignore `a`."
  cases:
  - given: { a: 3, b: 4 }
    expected_stdout: "4\n4"
  - given: { a: 0, b: 1 }
    expected_stdout: "1\n1"
  - given: { a: 2, b: 3 }
    expected_stdout: "3\n3"
25:
  description: "Example of a string literal being assigned to a variable."
  starting_code: |
    name = "Joe"
    puts name
26:
  description: "Example of string interpolation."
  starting_code: |
    name = "Joe"
    puts "My name is #{name}."
27:
  description: "Make the tests pass using string interpolation of the supplied variables `name` and `age`."
  cases:
  - given: { name: "Jill", age: 40 }
    expected_stdout: "My name is Jill and I am 40 years old."
  - given: { name: "Bill", age: 10 }
    expected_stdout: "My name is Bill and I am 10 years old."
28:
  description: "Example of accidentally forgetting to close a string literal, and its unintended consequences.  Notice the syntax coloration.  Change it so the test passes."
  starting_code: |
    x = 42
    puts "The value of x is:
    puts x
    puts "
    puts "Did that work?"
  cases:
  - expected_stdout: "The value of x is:\n42\n\nDid that work?"
29:
  description: "Example of how double-quotes indicate a string literal, not a string, and #{} interpolates variables.  The last two are brain-teasers.  Notice the syntax coloration."
  starting_code: |
    puts hello
    puts "hello"
    puts "I say hello."
    puts "I say #{hello}."
    puts "I say #{"hello"}."
    puts "I say #{"hello #{hello}"} hello."
  cases:
  - given: { hello: 42 }
30:
  description: "Example of using backslashes to escape characters inside string literals."
  starting_code: |
    puts "blue"
    puts "He said, \"okay.\""
    puts "C:\\>"
    puts "first line\nsecond line"
    puts "2 + 2 is #{2 + 2}."
    puts "2 + 2 is \#{2 + 2}."
